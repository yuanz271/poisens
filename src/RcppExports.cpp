// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_pois_enet
arma::mat fit_pois_enet(const arma::mat& x, const arma::vec& y, const double alpha, const arma::vec& lambda, const bool intercept, const unsigned int maxit, const double tol);
RcppExport SEXP poisens_fit_pois_enet(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP interceptSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(fit_pois_enet(x, y, alpha, lambda, intercept, maxit, tol));
    return __result;
END_RCPP
}
// fit_negbin_enet
arma::mat fit_negbin_enet(const arma::mat& x, const arma::vec& y, const double phi, const double alpha, const arma::vec& lambda, const bool intercept, const unsigned int maxit, const double tol);
RcppExport SEXP poisens_fit_negbin_enet(SEXP xSEXP, SEXP ySEXP, SEXP phiSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP interceptSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(fit_negbin_enet(x, y, phi, alpha, lambda, intercept, maxit, tol));
    return __result;
END_RCPP
}
// phi_ml
NumericVector phi_ml(const NumericVector& y, const NumericVector& mu, const unsigned int maxit, const double tol);
RcppExport SEXP poisens_phi_ml(SEXP ySEXP, SEXP muSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(phi_ml(y, mu, maxit, tol));
    return __result;
END_RCPP
}
// fit_pois_reg
arma::vec fit_pois_reg(const arma::mat& x, const arma::vec& y, const unsigned int maxit, const double tol);
RcppExport SEXP poisens_fit_pois_reg(SEXP xSEXP, SEXP ySEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(fit_pois_reg(x, y, maxit, tol));
    return __result;
END_RCPP
}
// fit_negbin_reg
arma::vec fit_negbin_reg(const arma::mat& x, const arma::vec& y, const double phi, const unsigned int maxit, const double tol);
RcppExport SEXP poisens_fit_negbin_reg(SEXP xSEXP, SEXP ySEXP, SEXP phiSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(fit_negbin_reg(x, y, phi, maxit, tol));
    return __result;
END_RCPP
}
